kube-prometheus-stack:
  fullnameOverride: prometheus # Provide a name to substitute for the full names of resources
  
  alertmanager:
    enabled: false
    fullnameOverride: alertmanager


  ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
  grafana:
    enabled: true
    fullnameOverride: grafana
    
    # Timezone for the default dashboards
    defaultDashboardsTimezone: Europe/Berlin
    
    ingress:
      enabled: true
      hosts:
        - grafana-central.local.naim.run
      path: / # /*
      pathType: Prefix # ImplementationSpecific
    
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        multicluster:
          global:
            enabled: true
      datasources:
        enabled: true
        defaultDatasourceEnabled: false # Disable default kube-prometheus-stack datasource
    
    grafana.ini:
      server:
        domain: grafana-central.local.naim.run
        root_url: https://grafana-central.local.naim.run
  
    ## Configure additional grafana datasources (passed through tpl)
    ## ref: http://docs.grafana.org/administration/provisioning/#datasources
    additionalDataSources:
      - name: Cortex
        access: proxy
        jsonData:
          httpHeaderName1: 'X-Scope-OrgID'
          tlsSkipVerify: true
        secureJsonData:
          httpHeaderValue1: 'org1'
        editable: true
        type: prometheus
        uid: cortex
        url: http://cortex-nginx.cortex.svc.cluster.local:80/api/prom/
        version: 1
      - name: Alertmanager
        access: proxy
        jsonData:
          httpHeaderName1: 'X-Scope-OrgID'
          tlsSkipVerify: true
        secureJsonData:
            httpHeaderValue1: 'org1'
        editable: true
        type: alertmanager
        uid: alertmanager
        url: http://cortex-nginx.cortex.svc.cluster.local:80/api/prom/alertmanager/ # http://cortex-alertmanager.cortex.svc.cluster.local:8080/api/prom/alertmanager/
        version: 1
      - name: Loki
        access: proxy
        editable: true
        type: loki
        uid: loki
        url: http://loki-gateway.loki.svc.cluster.local:80
        version: 1
        

  
  ## Component scraping the kube api server
  kubeApiServer:
    enabled: false


  ## Component scraping the kubelet and kubelet-hosted cAdvisor
  kubelet:
    enabled: true


  # Disable Controller metrics
  kubeControllerManager:
    enabled: false


  ## Component scraping coreDns. Use either this or kubeDns
  coreDns:
    enabled: false


  ## Component scraping kubeDns. Use either this or coreDns
  kubeDns:
    enabled: false


  ## Component scraping etcd
  kubeEtcd:
    enabled: false


  ## Component scraping kube scheduler
  kubeScheduler:
    enabled: false


  ## Component scraping kube proxy
  kubeProxy:
    enabled: false


  ## Component scraping kube state metrics
  kubeStateMetrics:
    enabled: true
  
  
  ## Configuration for kube-state-metrics subchart
  kube-state-metrics:
    fullnameOverride: kube-state-metrics


  ## Deploy node exporter as a daemonset to all nodes
  nodeExporter:
    enabled: true
    
  ## Configuration for prometheus-node-exporter subchart
  prometheus-node-exporter:
    fullnameOverride: node-exporter


  ## Manages Prometheus and Alertmanager components
  prometheusOperator:
    enabled: true
    admissionWebhooks: # https://github.com/prometheus-community/helm-charts/issues/418#issuecomment-740578727
      failurePolicy: Ignore
    ## If true, the operator will create and maintain a service for scraping kubelets
    kubeletService:
      enabled: true


  prometheus:
    enabled: true
    
    prometheusSpec:
      # Remote Write all the scrapped data to Cortex side with specific header parameter
      remoteWrite:
        - name: cortex
          url: http://cortex-nginx.cortex.svc:80/api/v1/push/org1 # http://cortex-nginx.cortex.svc:80/api/prom/push
  
      # Enable/Disable Grafana dashboards provisioning for prometheus remote write feature
      remoteWriteDashboards: true
      
      # How long to retain metrics
      retention: 1d
      
      # Configure Persistent Volume for Prometheus storage
      storageSpec:
        volumeClaimTemplate:
          spec:
            resources:
              requests:
                storage: 5Gi