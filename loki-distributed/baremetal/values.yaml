loki-distributed:
  fullnameOverride: loki # -- Overrides the chart's computed filename
  loki:
    containerSecurityContext:
      readOnlyRootFilesystem: false # https://github.com/grafana/loki/issues/2018
    config: |
      auth_enabled: true
      
      server:
        http_listen_port: 3100
  
      {{- if .Values.loki.distributorConfig}}
      distributor:
      {{- toYaml .Values.loki.distributorConfig | nindent 2}}
      {{- end}}
      
      {{- if .Values.loki.ingesterConfig}}
      ingester:
      {{- toYaml .Values.loki.ingesterConfig | nindent 2}}
      {{- end}}
  
      {{- if .Values.loki.limitsConfig}}
      limits_config:
      {{- toYaml .Values.loki.limitsConfig | nindent 2}}
      {{- end}}

      {{- if .Values.loki.schemaConfig}}
      schema_config:
      {{- toYaml .Values.loki.schemaConfig | nindent 2}}
      {{- end}}
      
      {{- if .Values.loki.storageConfig}}
      storage_config:
      {{- if .Values.indexGateway.enabled}}
      {{- $indexGatewayClient := dict "server_address" (printf "dns:///%s:9095" (include "loki.indexGatewayFullname" .)) }}
      {{- $_ := set .Values.loki.storageConfig.boltdb_shipper "index_gateway_client" $indexGatewayClient }}
      {{- end}}
      {{- toYaml .Values.loki.storageConfig | nindent 2}}
      {{- end}}
  
      chunk_store_config:
        max_look_back_period: 0s
  
      {{- if .Values.loki.queryrangeConfig}}
      query_range:
      {{- toYaml .Values.loki.queryrangeConfig | nindent 2}}
      {{- end}}
  
      frontend_worker:
        frontend_address: {{ include "loki.queryFrontendFullname" . }}:9095
  
      frontend:
        log_queries_longer_than: 5s
        compress_responses: true
        tail_proxy_url: http://{{ include "loki.querierFullname" . }}:3100
  
      {{- if .Values.loki.compactorConfig}}
      compactor:
      {{- toYaml .Values.loki.compactorConfig | nindent 2}}
      {{- end}}
  
      ruler:
        storage:
          type: local
          local:
            directory: /etc/loki/rules
        rule_path: /loki/rules
    

    distributorConfig:
      ring:
        kvstore:
          store: consul
          prefix: "loki/"
          consul:
            host: consul-server.consul.svc:8500
    
    ingesterConfig:
      lifecycler:
        ring:
          replication_factor: 1 # -- Ingester replication factor per
          kvstore:
            store: consul
            prefix: "loki/"
            consul:
              host: consul-server.consul.svc:8500
      max_transfer_retries: 0     # Chunk transfers disabled.
      chunk_retain_period: 30s    # How long chunks should be retained in-memory after they've been flushed.
      chunk_block_size: 262144    # When this threshold is exceeded the head block will be cut and compressed inside the chunk.
      chunk_idle_period: 1h       # Any chunk not receiving new logs in this time will be flushed.
      chunk_target_size: 1572864  # Loki will attempt to build chunks up to 1.5MB, flushing first if chunk_idle_period or max_chunk_age is reached first.
      chunk_encoding: snappy      # The compression algorithm to use for chunks. (supported: gzip, lz4, snappy).
      max_chunk_age: 2h           # All chunks will be flushed when they hit this age.
      wal:                        # Enables writing to WAL.
        enabled: true
        dir: /loki/wal
  
    limitsConfig:
      ingestion_rate_mb: 16
      ingestion_burst_size_mb: 20
      enforce_metric_name: false
      reject_old_samples: false                  # -- Whether or not old samples will be rejected | Default: true
      reject_old_samples_max_age: 168h
      retention_period: 744h    # 31days         # -- Retention to apply for the store, if the retention is enabled on the compactor side.
      max_cache_freshness_per_query: 10m
      split_queries_by_interval: 15m
    
    schemaConfig:
      configs:
        - from: 2022-07-18
          store: boltdb-shipper
          object_store: s3
          schema: v12
          index:
            prefix: loki_index_
            period: 24h
    
    storageConfig:                              # https://grafana.com/docs/loki/latest/configuration/#storage_config
      boltdb_shipper:                           # Directory where ingesters would write boltdb files which would then be uploaded by shipper to configured storage # https://grafana.com/docs/loki/latest/operations/storage/boltdb-shipper/
        shared_store: s3
        active_index_directory: /loki/index
        cache_location: /loki/boltdb-cache
        cache_ttl: 168h                         # Can be increased for faster performance over longer query periods, uses more disk space.
      aws:
        s3forcepathstyle: true
        bucketnames: logs
        endpoint: s3.local.naim.run
#        region: eu-central-1
        access_key_id: m5OVYpWHiClJuOfG
        secret_access_key: 8mjgGqxGQ1VJJ9VpCibvTUKZbSMKFnpf
        
    
    queryrangeConfig:
      align_queries_with_step: true
      max_retries: 5
      cache_results: true
      results_cache:
        cache:
          enable_fifocache: true
          fifocache:
            max_size_items: 1024
            validity: 24h
    
    compactorConfig:
      working_directory: /loki/boltdb-compactor
      shared_store: s3
      retention_enabled: true
      retention_delete_delay: 2h                # The amount of hours to delay the retention period
      retention_delete_worker_count: 150        # The total amount of worker to use to delete chunks
  
  
  ingester:
    replicas: 1
    persistence:
      enabled: true
      size: 5Gi
  
  
  distributor:
    replicas: 1
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 4
  
  
  tableManager: # https://stackoverflow.com/questions/70492906/table-manager-does-not-purge-chunk-in-loki-2-4
    enabled: false
  
  
  gateway:
    enabled: true
    replicas: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 4
    ingress:
      enabled: true
      ingressClassName: public
      hosts:
        - host: logs.local.naim.run
          paths:
            - path: /
              pathType: Prefix
      tls: []
    auth_orgs: # -- Custom configuration for Multitenancy
      - org1
      - org2
      - org3
    nginxConfig:
      # -- Config file contents for Nginx. Passed through the `tpl` function to allow templating
      # -- @default -- See values.yaml
      file: |
        worker_processes  5;  ## Default: 1
        error_log  /dev/stderr;
        pid        /tmp/nginx.pid;
        worker_rlimit_nofile 8192;

        events {
          worker_connections  4096;  ## Default: 1024
        }

        http {
          client_body_temp_path /tmp/client_temp;
          proxy_temp_path       /tmp/proxy_temp_path;
          fastcgi_temp_path     /tmp/fastcgi_temp;
          uwsgi_temp_path       /tmp/uwsgi_temp;
          scgi_temp_path        /tmp/scgi_temp;

          proxy_http_version    1.1;

          default_type application/octet-stream;
          log_format   {{ .Values.gateway.nginxConfig.logFormat }}

          {{- if .Values.gateway.verboseLogging }}
          access_log   /dev/stderr  main;
          {{- else }}

          map $status $loggable {
            ~^[23]  0;
            default 1;
          }
          access_log   /dev/stderr  main  if=$loggable;
          {{- end }}

          sendfile     on;
          tcp_nopush   on;
          {{- if .Values.gateway.nginxConfig.resolver }}
          resolver {{ .Values.gateway.nginxConfig.resolver }};
          {{- else }}
          resolver {{ .Values.global.dnsService }}.{{ .Values.global.dnsNamespace }}.svc.{{ .Values.global.clusterDomain }};
          {{- end }}

          {{- with .Values.gateway.nginxConfig.httpSnippet }}
          {{ . | nindent 2 }}
          {{- end }}

          server {
            listen             8080;

            {{- if .Values.gateway.basicAuth.enabled }}
            auth_basic           "Loki";
            auth_basic_user_file /etc/nginx/secrets/.htpasswd;
            {{- end }}

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              set $api_prom_push_backend http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $api_prom_push_backend:3100$request_uri;
            }

            location = /api/prom/tail {
              set $api_prom_tail_backend http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $api_prom_tail_backend:3100$request_uri;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            # Ruler
            location ~ /prometheus/api/v1/alerts.* {
              proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }
            location ~ /prometheus/api/v1/rules.* {
              proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }
            location ~ /api/prom/rules.* {
              proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }
            location ~ /api/prom/alerts.* {
              proxy_pass       http://{{ include "loki.rulerFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /api/prom/.* {
              set $api_prom_backend http://{{ include "loki.queryFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $api_prom_backend:3100$request_uri;
            }

            location = /loki/api/v1/push {
              set $loki_api_v1_push_backend http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $loki_api_v1_push_backend:3100$request_uri;
            }

            location = /loki/api/v1/tail {
              set $loki_api_v1_tail_backend http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $loki_api_v1_tail_backend:3100$request_uri;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              set $loki_api_backend http://{{ include "loki.queryFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }};
              proxy_pass       $loki_api_backend:3100$request_uri;
            }
            # Auth orgs
            {{- if .Values.gateway.auth_orgs}}
            {{- range $org := compact .Values.gateway.auth_orgs | uniq }}
            location = /loki/api/v1/push/{{ $org }} {
              proxy_set_header      X-Scope-OrgID {{ $org }};
              proxy_pass      http://loki-gateway.loki.svc.cluster.local/loki/api/v1/push;
            }
            {{- end }}
            {{- end }}
          }
        }
  
  compactor:
    enabled: true
    persistence:
      enabled: true
      size: 2Gi
  
  
  ruler:
    enabled: true
#    extraVolumes: # Requires if Loki runs as a single tenant mode # https://github.com/grafana/grafana/issues/42735#issuecomment-989055464
#      - name: fake
#        emptyDir: { }
#    extraVolumeMounts: # Requires if Loki runs as a single tenant mode # https://github.com/grafana/grafana/issues/42735#issuecomment-989055464
#      - name: fake
#        mountPath: /loki/rules/fake
  
  
  memcachedFrontend:
    enabled: true
      
      
        