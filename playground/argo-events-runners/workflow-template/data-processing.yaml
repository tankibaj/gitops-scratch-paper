# SUMMARY:
#
# ...
#
# DESCRIPTION:
#
# ...
#
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: data-processing
spec:
  entrypoint: main
#  onExit: exit-handler  # Define the exit handler
  # We use a volume claim template so that we can have a shared workspace.
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 500Mi
  templates:
    - name: main
      steps:
        - - name: download-json
            arguments:
              parameters:
                - name: jsonBucketName
                  value: "{{workflow.parameters.jsonBucketName}}"
                - name: jsonFilePath
                  value: "{{workflow.parameters.jsonFilePath}}"
                - name: downloadedJsonFileName
                  value: "{{workflow.parameters.downloadedJsonFileName}}"
            template: download-json
        - - name: debug-info
            template: debug-info
        - - name: transfer-artifacts
            arguments:
              parameters:
                - name: downloadedJsonFileName
                  value: "{{workflow.parameters.downloadedJsonFileName}}"
                - name: targetBucketName
                  value: "{{workflow.parameters.targetBucketName}}"
                - name: targetBucketStoragePath
                  value: "{{workflow.parameters.targetBucketStoragePath}}"
            template: transfer-artifacts
#        - - name: prepare-json-for-catalog
#            template: prepare-json-for-catalog
#        - - name: notify-catalog-service
#            template: send-post-request
#        - - name: remove-temporary-json
#            template: cleanup-json-file
#        - - name: success-notification
#            template: notify-teams-on-success
#          - name: failure-notification
#            template: notify-teams-on-failure

    - name: debug-info
      container:
        image: thenaim/alpine-whale:main
        imagePullPolicy: Always
        command: [sh, -c]
        args: ["ls -la && cat blaue-hand-briefe.json"]
        workingDir: /workspace
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: download-json
      inputs:
        parameters:
          - name: jsonFilePath
          - name: jsonBucketName
          - name: downloadedJsonFileName
      container:
        image: amazon/aws-cli
        command: [sh, -c]
        args: ["aws s3 cp s3://{{inputs.parameters.jsonBucketName}}/{{inputs.parameters.jsonFilePath}} {{inputs.parameters.downloadedJsonFileName}}"]
        workingDir: /workspace
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: accesskey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: secretkey
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: transfer-artifacts
      inputs:
        parameters:
          - name: downloadedJsonFileName
          - name: targetBucketName
          - name: targetBucketStoragePath
      container:
        image: thenaim/aws-s3-transfer-artifacts:latest
        imagePullPolicy: Always
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: accesskey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: secretkey
          - name: JSON_FILE
            value: "{{inputs.parameters.downloadedJsonFileName}}"
          - name: TARGET_BUCKET
            value: "{{inputs.parameters.targetBucketName}}"
          - name: TARGET_BUCKET_STORAGE_PATH
            value: "{{inputs.parameters.targetBucketStoragePath}}"
        volumeMounts:
          - name: workspace
            mountPath: /workspace

#    - name: prepare-json-for-catalog
#      container:
#        image: python:3.8-slim
#        env:
#          - name: STORAGE_PATH
#            valueFrom:
#              configMapKeyRef:
#                name: workflow-config
#                key: STORAGE_PATH
#        command: [python, /scripts/update_json.py]
#        volumeMounts:
#          - name: data-volume
#            mountPath: /mnt/data

#    - name: send-post-request
#      container:
#        image: appropriate/curl
#        env:
#          - name: ENDPOINT
#            valueFrom:
#              configMapKeyRef:
#                name: workflow-config
#                key: ENDPOINT
#          - name: BASIC_AUTH
#            valueFrom:
#              secretKeyRef:
#                name: auth-secret
#                key: BASIC_AUTH
#        command: [sh, -c]
#        args: ["curl -X POST -H 'Authorization: Basic $BASIC_AUTH' -H 'Content-Type: application/json' --data @/mnt/data/blaue-hand-briefe.json $ENDPOINT"]
#        volumeMounts:
#          - name: data-volume
#            mountPath: /mnt/data

#    - name: cleanup-json-file
#      container:
#        image: alpine:latest
#        command: [rm, -f]
#        args: ["/mnt/data/blaue-hand-briefe.json"]
#        volumeMounts:
#          - name: data-volume
#            mountPath: /mnt/data

#    - name: exit-handler
#      steps:
#        - - name: failure-notification
#            template: notify-teams-on-failure
#            when: "{{workflow.status}} == 'Failed'"
#        - - name: success-notification
#            template: notify-teams-on-success
#            when: "{{workflow.status}} == 'Succeeded'"
#
#    - name: notify-teams-on-success
#      container:
#        image: appropriate/curl
#        command: [sh, -c]
#        args: ["curl -H 'Content-Type: application/json' -d '{\"text\": \"Workflow {{workflow.name}} succeeded.\"}' <WEBHOOK_URL>"]
#
#    - name: notify-teams-on-failure
#      container:
#        image: appropriate/curl
#        command: [sh, -c]
#        args: ["curl -H 'Content-Type: application/json' -d '{\"text\": \"Workflow {{workflow.name}} failed. Failure cause: {{workflow.failures}}\"}' <WEBHOOK_URL>"]