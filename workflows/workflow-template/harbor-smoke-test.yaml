apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: harbor-smoke-test
spec:
  entrypoint: main
  arguments:
    parameters:
      - name: harbor-endpoint
      - name: harbor-user
      - name: harbor-password
      - name: harbor-project
      - name: image-list
  templates:
    - name: main
      dag:
        tasks:
          - name: create-project
            template: create-project
          - name: push-image
            template: push-image
            dependencies: [create-project]
            arguments:
              parameters:
                - name: image
                  value: "{{item}}"
            withParam: "{{workflow.parameters.image-list}}"
          - name: pull-image
            template: pull-image
            dependencies: [push-image]
            arguments:
              parameters:
                - name: image
                  value: "{{item}}"
            withParam: "{{workflow.parameters.image-list}}"
          - name: approve
            template: approve
            dependencies: [pull-image]
          - name: cleanup
            template: cleanup
            dependencies: [pull-image]

    - name: create-project
      container:
        image: curlimages/curl:latest
        command: [sh, -c]
        args:
          - |
            endpoint="{{workflow.parameters.harbor-endpoint}}"
            # Ensure endpoint starts with https://
            [[ "$endpoint" =~ ^https:// ]] || endpoint="https://${endpoint#http://}"
            curl -s -u "{{workflow.parameters.harbor-user}}:{{workflow.parameters.harbor-password}}" -X POST "$endpoint/api/v2.0/projects" -H 'Content-Type: application/json' -d '{"project_name": "{{workflow.parameters.harbor-project}}", "public": false}'

    # -- https://argo-workflows.readthedocs.io/en/latest/walk-through/docker-in-docker-using-sidecars/
    - name: push-image
      inputs:
        parameters:
          - name: image
      container:
        image: docker:19.03.13
        command: [sh, -c]
        args:
          - |
            until docker ps; do sleep 3; done;
            endpoint="{{workflow.parameters.harbor-endpoint}}"
            # Remove http:// or https:// for Docker tagging
            clean_endpoint="${endpoint#http://}"
            clean_endpoint="${clean_endpoint#https://}"
            # Further clean to ensure all protocols are removed
            clean_endpoint="${clean_endpoint/http:\/\//}"
            clean_endpoint="${clean_endpoint/https:\/\//}"
            echo 'DEBUG: {{inputs.parameters.image}}'
            docker pull "{{inputs.parameters.image}}"
            echo '{{workflow.parameters.harbor-password}}' | docker login "${endpoint}" -u '{{workflow.parameters.harbor-user}}' --password-stdin
            docker tag "{{inputs.parameters.image}}" "${clean_endpoint}/{{workflow.parameters.harbor-project}}/{{inputs.parameters.image}}"
            docker push "${clean_endpoint}/{{workflow.parameters.harbor-project}}/{{inputs.parameters.image}}"
        env:
          - name: DOCKER_HOST                 # the docker daemon can be access on the standard port on localhost
            value: 127.0.0.1
      sidecars:
        - name: dind
          image: docker:19.03.13-dind          # Docker already provides an image for running a Docker daemon
          command: [ dockerd-entrypoint.sh ]
          env:
            - name: DOCKER_TLS_CERTDIR         # Docker TLS env config
              value: ""
          securityContext:
            privileged: true                   # the Docker daemon can only run in a privileged container
          # mirrorVolumeMounts will mount the same volumes specified in the main container
          # to the sidecar (including artifacts), at the same mountPaths. This enables
          # dind daemon to (partially) see the same filesystem as the main container in
          # order to use features such as docker volume binding.
          mirrorVolumeMounts: true

    # -- https://argo-workflows.readthedocs.io/en/latest/walk-through/docker-in-docker-using-sidecars/
    - name: pull-image
      inputs:
        parameters:
          - name: image
      container:
        image: docker:19.03.13
        command: [sh, -c]
        args:
          - |
            until docker ps; do sleep 3; done;
            endpoint="{{workflow.parameters.harbor-endpoint}}"
            # Remove http:// or https:// for Docker tagging
            clean_endpoint="${endpoint#http://}"
            clean_endpoint="${clean_endpoint#https://}"
            # Further clean to ensure all protocols are removed
            clean_endpoint="${clean_endpoint/http:\/\//}"
            clean_endpoint="${clean_endpoint/https:\/\//}"
            echo '{{workflow.parameters.harbor-password}}' | docker login "${endpoint}" -u '{{workflow.parameters.harbor-user}}' --password-stdin
            docker pull "${clean_endpoint}/{{workflow.parameters.harbor-project}}/{{inputs.parameters.image}}"
        env:
          - name: DOCKER_HOST
            value: 127.0.0.1
      sidecars:
        - name: dind
          image: docker:19.03.13-dind
          command: [ dockerd-entrypoint.sh ]
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
          securityContext:
            privileged: true
          mirrorVolumeMounts: true

    # -- Manual Approval --
    - name: approve
      suspend: {}

    - name: cleanup
      container:
        image: curlimages/curl:latest
        command: [sh, -c]
        args:
          - |
            endpoint="{{workflow.parameters.harbor-endpoint}}"
            # Ensure endpoint starts with https://
            [[ "$endpoint" =~ ^https:// ]] || endpoint="https://${endpoint#http://}"
            curl -s -u "{{workflow.parameters.harbor-user}}:{{workflow.parameters.harbor-password}}" -X DELETE "$endpoint/api/v2.0/projects/{{workflow.parameters.harbor-project}}"