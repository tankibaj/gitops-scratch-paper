# SUMMARY:
#
# ...
#
# DESCRIPTION:
#
# ...
#
#
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: data-processing
spec:
  entrypoint: main
  onExit: exit-handler
  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 500Mi
  templates:
    - name: main
      steps:
        - - name: download-json
            arguments:
              parameters:
                - name: jsonBucketName
                  value: "{{workflow.parameters.jsonBucketName}}"
                - name: jsonFilePath
                  value: "{{workflow.parameters.jsonFilePath}}"
                - name: downloadedJsonFileName
                  value: "{{workflow.parameters.downloadedJsonFileName}}"
            template: download-json
        - - name: transfer-artifacts
            arguments:
              parameters:
                - name: downloadedJsonFileName
                  value: "{{workflow.parameters.downloadedJsonFileName}}"
                - name: targetBucketName
                  value: "{{workflow.parameters.targetBucketName}}"
                - name: targetBucketStoragePath
                  value: "{{workflow.parameters.targetBucketStoragePath}}"
            template: transfer-artifacts
        - - name: prepare-catalog-distribution
            arguments:
              parameters:
                - name: downloadedJsonFileName
                  value: "{{workflow.parameters.downloadedJsonFileName}}"
                - name: catalogStoragePath
                  value: "{{workflow.parameters.catalogStoragePath}}"
                - name: catalogRequestFile
                  value: "{{workflow.parameters.catalogRequestFile}}"
            template: prepare-catalog-distribution
        - - name: catalog-distribution
            arguments:
              parameters:
                - name: catalogRequestFile
                  value: "{{workflow.parameters.catalogRequestFile}}"
            template: catalog-distribution
        - - name: debug-info
            template: debug-info
#        - - name: cleanup-workspace
#            arguments:
#              parameters:
#                - name: downloadedJsonFileName
#                  value: "{{workflow.parameters.downloadedJsonFileName}}"
#                - name: catalogRequestFile
#                  value: "{{workflow.parameters.catalogRequestFile}}"
#            template: cleanup-workspace
#        - - name: notify-catalog-service
#            template: send-post-request
#        - - name: success-notification
#            template: notify-teams-on-success
#          - name: failure-notification
#            template: notify-teams-on-failure

    - name: debug-info
      container:
        image: thenaim/alpine-whale:main
        imagePullPolicy: Always
        command: [sh, -c]
        args: ["ls -la && cat blaue-hand-briefe.json && cat catalog-request.json"]
        workingDir: /workspace
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: download-json
      inputs:
        parameters:
          - name: jsonFilePath
          - name: jsonBucketName
          - name: downloadedJsonFileName
      container:
        image: amazon/aws-cli
        command: [sh, -c]
        args: ["aws s3 cp s3://{{inputs.parameters.jsonBucketName}}/{{inputs.parameters.jsonFilePath}} {{inputs.parameters.downloadedJsonFileName}}"]
        workingDir: /workspace
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: accesskey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: secretkey
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: transfer-artifacts
      inputs:
        parameters:
          - name: downloadedJsonFileName
          - name: targetBucketName
          - name: targetBucketStoragePath
      container:
        image: thenaim/aws-s3-transfer-artifacts:latest
        imagePullPolicy: Always
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: accesskey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: secretkey
          - name: JSON_FILE
            value: "{{inputs.parameters.downloadedJsonFileName}}"
          - name: TARGET_BUCKET
            value: "{{inputs.parameters.targetBucketName}}"
          - name: TARGET_BUCKET_STORAGE_PATH
            value: "{{inputs.parameters.targetBucketStoragePath}}"
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: prepare-catalog-distribution
      inputs:
        parameters:
          - name: downloadedJsonFileName
          - name: catalogStoragePath
          - name: catalogRequestFile
      container:
        image: thenaim/prepare-catalog-distribution:latest
        imagePullPolicy: Always
        env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: accesskey
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: sqs-eventsource-aws-secret
                key: secretkey
          - name: JSON_FILE
            value: "{{inputs.parameters.downloadedJsonFileName}}"
          - name: CATALOG_STORAGE_PATH
            value: "{{inputs.parameters.catalogStoragePath}}"
          - name: CATALOG_REQUEST_FILE
            value: "{{inputs.parameters.catalogRequestFile}}"
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: catalog-distribution
      inputs:
        parameters:
          - name: catalogRequestFile
      container:
        image: thenaim/catalog-distribution:latest
        imagePullPolicy: Always
        env:
          - name: CATALOG_URL
            valueFrom:
              secretKeyRef:
                name: catalog-credentials
                key: catalog_url
          - name: CATALOG_USERNAME
            valueFrom:
              secretKeyRef:
                name: catalog-credentials
                key: catalog_username
          - name: CATALOG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: catalog-credentials
                key: catalog_password
          - name: CATALOG_REQUEST_FILE
            value: "{{inputs.parameters.catalogRequestFile}}"
        volumeMounts:
          - name: workspace
            mountPath: /workspace

    - name: exit-handler
      steps:
        - - name: notify
            template: notify-workflow-status
    - name: notify-workflow-status
      container:
        image: alpine:latest
        command: [sh, -c]
        args: ["echo send e-mail: {{workflow.name}} {{workflow.status}} {{workflow.duration}}"]
        # MS Teams Webhook URL
#        args:
#          - "curl -H 'Content-Type: application/json' -d '{\"text\": \"Workflow {{workflow.name}} {{workflow.status}} {{workflow.duration}}\"}' <WEBHOOK_URL>"



#    - name: cleanup-workspace
#      inputs:
#        parameters:
#          - name: downloadedJsonFileName
#          - name: catalogRequestFile
#      container:
#        image: alpine:latest
#        command: [rm, -f]
#        args:
#          - "{{inputs.parameters.downloadedJsonFileName}}"
#          - "{{inputs.parameters.catalogRequestFile}}"
#        volumeMounts:
#          - name: workspace
#            mountPath: /workspace