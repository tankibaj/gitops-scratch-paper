apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: terra-ai
spec:
  # must complete in 8h (28,800 seconds)
  activeDeadlineSeconds: 28800
  ttlStrategy:
    # keep workflows for 1d (86,400 seconds)
    secondsAfterCompletion: 28800 # Time to live after the workflow is completed, replaces ttlSecondsAfterFinished
  #    secondsAfterSuccess: 20 # Time to live after workflow is successful
  #    secondsAfterFailure: 120 # Time to live after workflow fails
  entrypoint: main
  volumeClaimTemplates:
    - metadata:
        name: terraform-workspace
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
  templates:
    - name: main
      dag:
        tasks:
          - name: terraform
            template: terraform
            arguments:
              parameters:
                - name: git_repo_url
                  value: "{{workflow.parameters.git_repo_url}}"
                - name: terraform_config_dir
                  value: "{{workflow.parameters.terraform_config_dir}}"
                - name: stack_name
                  value: "{{workflow.parameters.stack_name}}"
                - name: instance_type
                  value: "{{workflow.parameters.instance_type}}"

    # -- Terraform execution --
    - name: terraform
      inputs:
        parameters:
          - name: git_repo_url
          - name: git_branch_name
          - name: terraform_config_dir
          - name: stack_name
          - name: instance_type
      container:
        volumeMounts:
          - mountPath: /workspace
            name: terraform-workspace
        image: thenaim/terraform-git:latest
        workingDir: /workspace
        command: [sh, -c]
        env:
          - name: TF_VAR_aws_access_key
            valueFrom:
              secretKeyRef:
                name: aws-credentials
                key: aws_access_key
          - name: TF_VAR_aws_secret_key
            valueFrom:
              secretKeyRef:
                name: aws-credentials
                key: aws_secret_key
          - name: TF_VAR_name
            value: "{{inputs.parameters.stack_name}}"
          - name: TF_VAR_instance_type
            value: "{{inputs.parameters.instance_type}}"
        args:
          - |
            git clone '{{inputs.parameters.git_repo_url}}' .
            cp backend.example.hcl backend.$TF_VAR_name.hcl
            sed -i '' "s|aws/service/tfstate|aws/${TF_VAR_name}/tfstate|" backend.$TF_VAR_name.hcl
            terraform -chdir="{{inputs.parameters.terraform_config_dir}}" init terraform init -backend-config=backend.$TF_VAR_name.hcl -upgrade -no-color
            terraform -chdir="{{inputs.parameters.terraform_config_dir}}" plan -input=false -no-color -out=tfplan
            terraform -chdir="{{inputs.parameters.terraform_config_dir}}" apply -no-color -auto-approve "tfplan"
            terraform -chdir="{{inputs.parameters.terraform_config_dir}}" output